name: integration-test

on:
  push:
    branches:
      - master
      # - <your-branch>    # put your branch name here to test it @ GH Actions
  pull_request:
    branches:
      - master

env:
  DOCKER_PKG: docker.pkg.github.com/${{github.repository}}/yagna-goth

jobs:
  level0:
    name: Run integration tests (level 0)
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Print python and pip version
        run: python --version && pip --version

      - name: Get yagna deb file
        run:  pip install requests && python ./docker/download_artifacts.py -t ${{ secrets.YAGNA_WORKFLOW_TOKEN }}

      - name: Get version of yagna deb file
        run: echo ::set-env name=YAGNA_DEB::$(dpkg-deb -f ./yagna.deb Version)

      - run: echo ${{ secrets.YAGNA_WORKFLOW_TOKEN }} | docker login docker.pkg.github.com -u ${{github.actor}} --password-stdin

      - name: Build the docker-compose stack
        env:
          GITHUB_API_TOKEN: ${{ secrets.YAGNA_WORKFLOW_TOKEN }}
          YAGNA_DEB: ${{ env.YAGNA_DEB }}
        run: |
          docker-compose -f docker/docker-compose.yml pull --ignore-pull-failures
          docker-compose -f docker/docker-compose.yml up -d

      # --ignore-pull-failures: if there is no cache in github packages
      # or latest cache is invalidated, this flag will prevent failing
      # in next step we will build non-existent images.
      #
      # --ignore-push-failures: if there is an image we wont be caching,
      # "docker compose push" anyway will try to push but will get denied,
      # so this flag will prevent command to fail.
      # Until this pr merged in docker compose: https://github.com/docker/compose/pull/7430
      # it's the best option to use.

      - name: Push docker images to Github Packages
        run: docker-compose -f docker/docker-compose.yml push --ignore-push-failures

      # tagging as latest after push, so goth/runner/container/yagna.py#L35 wont complain
      - name: Update tag of yagna image with version of yagna.deb file
        run: docker tag ${DOCKER_PKG}:${YAGNA_DEB} yagna-goth:latest

      - name: Run setuptools
        run: python setup.py develop

      - name: Print installed package versions
        run: pip freeze

      - name: Check running containers
        run: docker ps

      - name: Run test suite
        run: python -m pytest test/level0 -svx --log-cli-level=DEBUG

      - name: Upload test logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: level0-test-logs
          path: /tmp/yagna-tests

  level1:
    name: Run integration tests (level 1)
    needs: [level0]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Print python and pip version
        run: python --version && pip --version

      - name: Get yagna deb file
        run:  pip install requests && python ./docker/download_artifacts.py -t ${{ secrets.YAGNA_WORKFLOW_TOKEN }}

      - name: Get version of yagna deb file
        run: echo ::set-env name=YAGNA_DEB::$(dpkg-deb -f ./yagna.deb Version)

      - run: echo ${{ secrets.YAGNA_WORKFLOW_TOKEN }} | docker login docker.pkg.github.com -u ${{github.actor}} --password-stdin

      - name: Build the docker-compose stack
        env:
          GITHUB_API_TOKEN: ${{ secrets.YAGNA_WORKFLOW_TOKEN }}
          YAGNA_DEB: ${{ env.YAGNA_DEB }}
        run: |
          docker-compose -f docker/docker-compose.yml pull --ignore-pull-failures
          docker-compose -f docker/docker-compose.yml up -d

      # tagging as latest after push, so goth/runner/container/yagna.py#L35 wont complain
      - name: Update tag of yagna image with version of yagna.deb file
        run: docker tag ${DOCKER_PKG}:${YAGNA_DEB} yagna-goth:latest

      - name: Run setuptools
        run: python setup.py develop

      - name: Print installed package versions
        run: pip freeze

      - name: Check running containers
        run: docker ps

      - name: Run test suite
        run: python -m pytest test/level1 -svx --log-cli-level=DEBUG

      - name: Upload test logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: level1-test-logs
          path: /tmp/yagna-tests
